clc; close all; clear all;
dt = 0.1;
vm=1;
vt=0.5;

sys = ICtSystem(...
        'StateEquation', @(t,x,u,varargin) [
        vm*cos(u(1));
        vm*sin(u(1));
        vt*cos(3.14/2);
        vt*sin(3.14/2);
        vt*cos(x(6))-vm*cos(u(1)-x(6));
        (vt*sin(-x(6))-vm*sin(u(1)-x(6)))/x(5)],...
        'OutputEquation', @(t,x,varargin) x(1:6), 'ny', 6,...
        'nx',6,'nu',1 ...
        );
m1=0;
m2=0;
t1=30;
t2=30;
R1=sqrt((t1-m1)^2+(t2-m2)^2);
Th=atan2((t2-m2),(t1-m1));
%sys.initialCondition = [0;0;100;150;50;50;70.72;0.78;0];
% System with state and input noise covariance matrices
Q = diag(([0.1,0.1,0.1,0.1,0.1,0.1])/3)^2;
R = diag(([0.1,0.1,0.1,0.1,0.1,0.1])/3)^2;

realSystem = ICtSystem(...
    'StateEquation',  @(t,x,u,varargin) sys.f(t,x,u,varargin{:}) + chol(Q)*randn(6,1),...
    'OutputEquation', @(t,x,varargin)   sys.h(t,x,varargin{:})   + chol(R)*randn(6,1), 'ny', 6,...
    'nx',6,'nu',2 ...
);

realSystem.initialCondition = {[m1;m2;t1;t2;R1;Th]};

for ii = 1:length(realSystem.initialCondition)
    x0Filter{ii} = [realSystem.initialCondition{ii} + 5*randn(6,1);  %xHat(0)
                    10*reshape(eye(6),36,1)                          ]; %P(0)
end

realSystem.stateObserver = EkfFilter(DiscretizedSystem(sys,dt),...
                 'StateNoiseMatrix'  , dt*Q,...
                 'OutputNoiseMatrix' , R,...
                 'InitialCondition'  , x0Filter);
% 
%                  'StateNoiseMatrix'  , dt*Q,...
%                  'OutputNoiseMatrix' , R,...             

mpcOp = ICtMpcOp( ...
    'System'               , realSystem,...
    'HorizonLength'        , 2*dt,...
    'StageCost'            , @(t,x,u,varargin) ((x(3)-x(1))^2+(x(4)-x(2))^2));

dtMpcOp      = DiscretizedMpcOp(mpcOp,dt);

dtRealSystem = DiscretizedSystem(realSystem,dt);

dtRealSystem.controller = MpcController(...
    'MpcOp'       , dtMpcOp ,...
    'MpcOpSolver' , FminconMpcOpSolver('MpcOp', dtMpcOp,'UseSymbolicEvaluation',1) ...
    );

va = VirtualArena(dtRealSystem,...
    'StoppingCriteria'  , @(t,sysList)sqrt(((dtRealSystem.x(3)-dtRealSystem.x(1))^2+(dtRealSystem.x(4)-dtRealSystem.x(2))^2))<0.2 || sqrt(((dtRealSystem.x(5)-dtRealSystem.x(1))^2+(dtRealSystem.x(6)-dtRealSystem.x(2))^2))<0.2,...
    'PlottingStep'      , 1/0.1, ...
    'StepPlotFunction'  , @M2StepPlotFunction ...
    );

log = va.run();

